{"version":3,"sources":["webpack:///./src/lib/components/DashAlert.react.js"],"names":["BORDER_TRANSPARENT","BACKGROUND_TRANSPARENT","Background","styled","div","Alert","Title","Message","ButtonWrapper","Button","button","DashAlert","props","buttons","maxCount","getMaxCount","value","console","log","setProps","is_open","cnt","btn","Math","max","title","length","JSON","stringify","id","message","children","push","btns","style","maxWidth","color","backgroundColor","borderColor","click","display","Component","defaultProps","propTypes","PropTypes","string","messages","node","isRequired","arrayOf","object","oneOfType","number","bool","func"],"mappings":"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","file":"b534dc7-main-wps-hmr.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, {Component} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst BORDER_TRANSPARENT = '99';\r\nconst BACKGROUND_TRANSPARENT = '99';\r\n\r\nconst Background = styled.div`\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: ${'#000000' + BACKGROUND_TRANSPARENT};\r\n    padding: 50px;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst Alert = styled.div`\r\n    padding: 15px 0 20px;\r\n    background-color: white;\r\n    border-radius: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n`;\r\n\r\nconst Title = styled.div`\r\n    border-bottom: solid thin black;\r\n    padding: 5px 30px;\r\n`;\r\n\r\nconst Message = styled.div`\r\n    padding: 10px 30px;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: 10px;\r\n    padding: 0 30px;\r\n    box-sizing: content-box;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    flex: 1;\r\n    padding: 3px 0;\r\n    background-color: ${'#000000' + BACKGROUND_TRANSPARENT};\r\n    border-radius: 9999px;\r\n    border: solid thin ${'#000000' + BORDER_TRANSPARENT};\r\n    color: white;\r\n`;\r\n\r\nexport default class DashAlert extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.buttons = this.props.buttons;\r\n        this.maxCount = this.getMaxCount();\r\n    }\r\n\r\n    /**\r\n     * ボタンがクリックされた場合の動作\r\n     * @param {*} value ボタンのvalue\r\n     */\r\n    click(value) {\r\n        console.log('-- ON CLICK', value);\r\n        this.props.setProps({value, is_open: false});\r\n    }\r\n\r\n    /**\r\n     * ボタンの最大文字数を取得\r\n     * @returns 最大文字数\r\n     */\r\n    getMaxCount() {\r\n        let cnt = 0;\r\n        for (const btn of this.buttons) {\r\n            cnt = Math.max(cnt, btn.title.length);\r\n        }\r\n        return cnt;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // 最大文字数設定\r\n        if (\r\n            JSON.stringify(this.buttons) !== JSON.stringify(this.props.buttons)\r\n        ) {\r\n            this.buttons = this.props.buttons;\r\n            this.maxCount = this.getMaxCount();\r\n        }\r\n\r\n        // 開くときに値をリセット\r\n        if (this.props.is_open && (this.props.value || this.props.value == 0)) {\r\n            this.props.setProps({value: null});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {id, message, title, buttons, is_open} = this.props;\r\n\r\n        const children = [];\r\n\r\n        // タイトル\r\n        if (title) {\r\n            children.push(<Title className=\"da-title\">{title}</Title>);\r\n        }\r\n\r\n        // メッセージ\r\n        children.push(<Message className=\"da-msg\">{message}</Message>);\r\n\r\n        // ボタン\r\n        const btns = [];\r\n        for (const btn of buttons) {\r\n            const style = {maxWidth: 'calc(' + this.maxCount + 'em + 50px)'};\r\n            if (btn.color) {\r\n                style.backgroundColor = btn.color + BACKGROUND_TRANSPARENT;\r\n                style.borderColor = btn.color + BORDER_TRANSPARENT;\r\n            }\r\n            btns.push(\r\n                <Button\r\n                    type=\"button\"\r\n                    onClick={() => this.click(btn.value)}\r\n                    style={style}\r\n                >\r\n                    <span>{btn.title}</span>\r\n                </Button>\r\n            );\r\n        }\r\n\r\n        children.push(\r\n            <ButtonWrapper className=\"da-button-wrapper\">{btns}</ButtonWrapper>\r\n        );\r\n\r\n        return (\r\n            <div id={id} style={{display: is_open ? 'block' : 'none'}}>\r\n                <Background className=\"da-background\">\r\n                    <Alert className=\"da-alert\">{children}</Alert>\r\n                </Background>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDashAlert.defaultProps = {\r\n    is_open: false,\r\n};\r\n\r\nDashAlert.propTypes = {\r\n    id: PropTypes.string,\r\n    messages: PropTypes.node.isRequired,\r\n    title: PropTypes.node,\r\n    buttons: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    is_open: PropTypes.bool,\r\n    setProps: PropTypes.func,\r\n};\r\n"],"sourceRoot":""}